<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="UserTest">
    <!--namespace为命名空间，功能是对sql语句进行分类管理，隔离sql语句 -->
    <resultMap id="base" type="com.bh.pojo.User">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="birthday" jdbcType="DATE" property="birthday"/>
        <result column="sex" jdbcType="VARCHAR" property="sex"/>
        <result column="address" jdbcType="VARCHAR" property="address"/>
    </resultMap>
    <!--需求：通过id查询用户信息-->
    <!--根据id获取用户信息
     id:标识映射文件中的sql
      将sql语句封装到mappedStatement对象中，所以id称为statement的id
      如果输入参数是简单类型，参数名可以任意，如：value或其它名称
      resultType:指定sql输出结果映射的java对象类型
      select 指定resultType表示将单条记录映射成java对象     -->
    <!--根据id查询用户信息-->
    <select id="findUserById" parameterType="int"
            resultType="com.bh.pojo.User" resultMap="base">
        select * from user where id=#{value}<!-- parameterType:指定输入参数类型,
        #{}：表示占位符
       #{id}：id表示接收输入的参数，名称是id-->
        <!-- #{}:占位符，#{value}：接收前端传过来的值 -->
    </select>

    <!--根据用户名称模糊查询，结果可能是多条数据
     resultType:指定映射 java 对象类型
     -->
    <select id="findUserByName" parameterType="String" resultMap="base">
        select * from user where username like '%${value}%'<!--'%${value}%':-->
        <!--  #{}：表示占位符,, ${}:拼接 sql 语句，把接收的参数数据拼接在 sql 中
        ${value}:接收输入参数，若是简单类型，${}中只能使用 value -->
    </select>

    <select id="findAll" parameterType="List"
            resultType="com.bh.pojo.User">
        select * from user<!-- 查询所有数据-->
    </select>
    <!--添加一行数据 -->
    <insert id="insertUser" parameterType="com.bh.pojo.User">
        <selectKey keyProperty="id" order="AFTER" resultType="Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT into user (username,birthday,sex,address)VALUES
        (#{username},#{birthday},#{sex},#{address})<!--user表添加一行数据-->
    </insert>
    <!--添加数据;uuid 生成主键-->
    <insert id="insertPersonUUID" parameterType="com.bh.pojo.Person">
        <selectKey resultType="java.lang.String" order="BEFORE" keyProperty="id">
            select uuid()
        </selectKey>
        insert into person (id,username,sex,address)values (#{id},#{username},#{sex},#{address})<!--person表添加一行数据-->
    </insert>
    <!--删除数据-->
    <delete id="deleteUserById" parameterType="int">
    delete from user where id=#{id}
   </delete>
    <!--修改数据-->
    <update id="updateUser"
            parameterType="com.bh.pojo.User">
        update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
        <!--根据id匹配修改数据，根据id定义，set修改name birthday sex的值-->
    </update>

</mapper>
